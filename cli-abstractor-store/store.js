const data = {
    "projectName": "",
    "description": "",
    "content": [
        {
            "flag": "default",
            "content": [
                {
                    "name": "./.cli-ignore",
                    "content": "README.md\npackage.json\nindex-client-module.js\n.git\ncli-abstractor-store\ntestOutput.c"
                },
                {
                    "name": "./testInput.c",
                    "content": "#include <stdio.h>\nint main()\n{\n    // printf() displays the string inside quotation\n    printf(\"{{Hello}}, World! Welcome to the new {{World}}, let's see if this works {{Hello  }}\");\n    return 0;\n}"
                },
                {
                    "name": "./cli-abstractor-store/flag.js",
                    "content": "\nconst args = process.argv.slice(2)\n\nconst targetFlag = '--default'\n\nconsole.log(args)\n\nconsole.log(`finding default in your arguments....\\nSTATUS: ${args.includes(targetFlag)}`)"
                },
                {
                    "name": "./cli-abstractor-store/getFileAndFoldersToIgnore.js",
                    "content": "\nimport { isProjectCreator } from \"./globalVariables.js\"\nimport { readFile } from \"./io.js\"\n/**\n * This function is used to get the list of string that will be\n * use to ignore files and folders in store. It should return empty array \n * if no .cli-ignore exists otherwise an array of string of files and folders to ignore\n * \n * @returns Array of String\n */\nexport const  getFileAndFoldersToIgnore = async () => {\n\n    const content_of_ignore_file = await readFile( './.cli-ignore')\n\n\n    if (content_of_ignore_file !== null) { \n\n        if (!isProjectCreator()){\n            return content_of_ignore_file.split(\"\\n\").map(x => x.trimEnd('\\r')).filter(x => x !== '')\n        }else{\n            return content_of_ignore_file.split(\"\\n\").map(x => x.trimEnd('\\r'))\n                .filter(x => x !== '').filter(x => x !== 'cli-abstractor-store')\n        }\n    }\n\n    return []\n}"
                },
                {
                    "name": "./cli-abstractor-store/getFilesAndToBeStored.js",
                    "content": "import fs from 'fs'\n/**\n * This function is used to get the list of all the files and folders that\n * shouldn't be ignored\n * \n * @param listOfFilesToIgnore Array of string of files/folders to ignore \n * \n * @returns Array of String or null\n */\nexport const getFileAndFoldersToBeStored = (listOfFilesAndFoldersToIgnore) => {\n\n    listOfFilesAndFoldersToIgnore = treatList(listOfFilesAndFoldersToIgnore)\n    const finalCatalogOfFiles = []\n    const ignore = checkForIgnoreWithList(listOfFilesAndFoldersToIgnore)\n\n    // This should get us the current path of the user\n    const targetFromHere = \".\"\n\n    // Next, recursively fetch all the files in the folders in the path\n    let arr = fs.readdirSync(`${targetFromHere}/`).map(x => `${targetFromHere}/${x}`);\n    \n    const files = arr.filter(isFile).filter(ignore);\n\n    files && finalCatalogOfFiles.push(...files)\n\n    const folders = arr.filter(x => !isFile(x))\n\n    while (folders.length > 0){\n\n        const folderName = folders.pop()\n\n        // console.log(folderName)\n        \n        const inside = fs.readdirSync(folderName).map(x => `${folderName}/${x}`)\n\n        const filesInside = inside.filter(isFile).filter(ignore)\n\n        filesInside && finalCatalogOfFiles.push(...filesInside)\n\n        // console.log(`files in ${folderName} are ${filesInside}`)\n\n        const foldersInside = inside.filter(x => !isFile(x))\n\n        foldersInside && folders.push(...foldersInside)\n    }\n\n    return finalCatalogOfFiles\n}\n\n/**\n * Checks if a file is a file, returns true if file\n * false if folder\n */\nconst isFile = fileName => {\n    return fs.lstatSync(fileName).isFile();\n};\n\n/**\n * This should do some treatment to allow us to check \n * for string comparison\n * \n * @param {String Array} listOfFilesAndFoldersToIgnore \n */\nconst treatList = (listOfFilesAndFoldersToIgnore) => {\n\n    const finalList = []\n\n    for (let name of listOfFilesAndFoldersToIgnore){\n        if (name.startsWith('./')){\n            finalList.push(name)\n        }\n        else if (name.startsWith('/')){\n            finalList.push(`.${name}`)\n        }\n        else{\n            finalList.push(`./${name}`)\n        }\n    }\n\n    return finalList\n}\n\n/**\n * Should return a boolean if a word starts with\n * any of the to be ignored words\n * \n * @param {String} word \n * @param {String[]} listOfIgnores \n */\nconst checkForIgnore = (word, listOfIgnores) => {\n\n    for (let name of listOfIgnores){\n        // console.log(`${name} - ${listOfIgnores}`)\n        if (word.startsWith(name)){\n            return false\n        }\n    }\n\n    return true\n\n}\n\n/**\n * This function utilizes currying to allow for using checkForIgnoreFunction \n * with filter\n * \n * @param {String[]} listOfIgnores \n * @returns function that takes a string and returns boolean\n */\n\nconst checkForIgnoreWithList = (listOfIgnores) => {\n    return (word) => {\n        const a = checkForIgnore(word, listOfIgnores)\n        // console.log(`${word}, ${a} -> IGNORES => ${listOfIgnores}`)\n        return a\n    }\n}"
                },
                {
                    "name": "./cli-abstractor-store/globalVariables.js",
                    "content": "// This should only be true for me\n// since my repo will be executed\n// and it needs to touch the package.json\n// REMEMBER to mark this false when absorbing\nexport const isProjectCreator = () => {\n    return true\n}\n\n\nexport const useForEndUser = () => {\n    return false\n}\n"
                },
                {
                    "name": "./cli-abstractor-store/index.js",
                    "content": "#!/usr/bin/env node\nimport {askForVar} from './prompt.js'\nimport { writeToStore, readFile, storeJsonCreator, fileWriter } from './io.js'\nimport { getFileAndFoldersToBeStored } from './getFilesAndToBeStored.js'\nimport { getFileAndFoldersToIgnore } from './getFileAndFoldersToIgnore.js'\nimport {isProjectCreator, useForEndUser} from './globalVariables.js'\nimport data from './store.js'\nimport updatePackageJson from './updatePackageJson.js'\n\n\nasync function main(){\n\n    // We grab all the files on the current path\n    // TODO : recursively fetch all the files in the folders in the path\n\n    // This is for CLI developer\n    if (!useForEndUser())\n    {\n        if (isProjectCreator()){\n            updatePackageJson()\n        }\n\n        const listOfFilesToIgnore = await getFileAndFoldersToIgnore()\n\n        !isProjectCreator() && (listOfFilesToIgnore.push('.cli-ignore'))\n\n        const listOfFilesToStore = getFileAndFoldersToBeStored(listOfFilesToIgnore)\n        \n        console.log(\"Here is the list of files that would be added\")\n        console.log(listOfFilesToStore)\n\n        console.log(\"Do you want to continue\")\n        var answer = await askForVar(\"answer\")\n        if (answer !== 'yes' && answer !== 'y'){\n            return\n        }\n\n        var in_flag = await askForVar(\"Flag\");\n\n        in_flag = in_flag === '' ? 'default' : in_flag;\n\n        const availableFlags = data ? data.content.map(x => x.flag) : []\n\n        if (availableFlags.includes(in_flag)){\n            console.log(`There appears to be a conflict. Existing flags: ${availableFlags}`+\n            '\\nAre you sure you want to overwrite existing files? - check cli-abstractor-store/store.js')\n            console.log(\"Do you want to continue\")\n            var answer = await askForVar(\"answer\")\n            if (answer !== 'yes' && answer !== 'y'){\n                return\n            }\n        }\n\n        const list_of_files_and_content = []\n\n        for (let fileName of listOfFilesToStore){\n            const content_of_file = await readFile(fileName)\n            console.log(content_of_file);\n\n            let new_file_content = {}\n            new_file_content['name'] = fileName\n            new_file_content['content'] = content_of_file\n            list_of_files_and_content.push(new_file_content)\n\n\n        }\n\n        const test_for_file = storeJsonCreator(in_flag, list_of_files_and_content);\n\n        console.log(test_for_file)\n        writeToStore(test_for_file)\n    }\n    // This will be running on the end user's computers\n    else{\n        const availableFlags = data ? data.content.map(x => x.flag) : []\n        console.log(`Available flags: ${availableFlags}`)\n\n        // check for flag\n        var inFlag = await askForVar('flag')\n        inFlag = inFlag === '' ? 'default' : inFlag\n\n        const dataSelected = data ? data.content.filter(x => x.flag === inFlag): []\n        \n        if (dataSelected.length === 0 )\n        {    \n            console.log(`nothing matching the flag found. Available flags: ${availableFlags}`)\n        }\n        else{\n            // There shouldn't be more than one modules matching the same flag\n            const selectedModule = dataSelected[0]\n\n            for (let file of selectedModule.content){\n                console.log(`+ creating/writing to file ${file.name}`)\n                await fileWriter(file.name, file.content)\n            }\n        }\n\n    }\n\n    // create a .cli-ignore\n    // read the ignore file and get a list of file/folder names\n    // dont put the file or foldernames that match the list in the store file/folder list\n    // make a copy of all the files in the store along with mapping - with the default flag\n    // this should then auto create the index file that would help users access flags and dynamically\n    // generate a prompt\n    // STAGE 1 COMPLETE\n    // console.log(process.cwd())\n}\n\nmain()"
                },
                {
                    "name": "./cli-abstractor-store/io.js",
                    "content": "import { promisify } from 'util';\nimport { regexScan } from './regex.js';\nimport fs from 'fs'\nimport path from 'path'\n\n/**\n * This should get the content of the file as String from a filenamesfread\n * \n * @param {String} fileName \n * @returns \n */\n export const readFile = async (fileName) => {\n\n    try{\n        const readFile = promisify(fs.readFile);\n        const data_out = await readFile(fileName, 'utf8')\n\n        return data_out;\n    }catch(e){\n        // console.log(e)\n        return null\n    }\n}\n\n/**\n * General purpose function, takes the filename and the string to be written to it\n * \n * @param {String} fileName \n * @param {String} content \n */\n export const fileWriter = async (fileName, content) => {\n    async function isExists(path) {\n        try {\n            await fs.access(path);\n            return true;\n        } catch {\n            return false;\n        }\n    };\n      \n    const errorLog = (custom_string) =>{\n\n        return (err) => {\n            if (err){\n                console.log(`Error writing to the ${custom_string}. Name : ${fileName}: ${err}`);\n            }\n        }\n    }\n\n    try {\n        const dirname = path.dirname(fileName);\n        const exist = await isExists(dirname);\n        if (!exist) {\n            await fs.mkdirSync(dirname, {recursive: true}, errorLog('directory'));\n        }\n        \n        await fs.writeFile(fileName, content, errorLog('file'))\n\n    } catch (err) {\n        console.log(`Error writing to file ${fileName}: ${err}`);\n    }\n      \n\n}\n/**\n * This should take a JSON and save a stringized version on it in store.js\n * \n * @param {JSON} value \n */\nexport const writeToStore = (value) => {\n    const content = JSON.stringify(value, null, 4);\n\n\n    const data = `const data = ${content}\\n\\nexport default data;`\n\n    // To be used for all content in sotre\n    const fileName = `./cli-abstractor-store/store.js`\n\n    fileWriter(fileName, data);\n}\n\n/**\n * This is a general purpose function to be used for creating the json\n * and objects to be used for the store\n * \n * @param content Array of dictionaries with name and content keys for all the files\n */\n export const storeJsonCreator = (flag, content) => {\n    var inputs = new Set()\n    \n    for (let files of content){\n        let newMatch = regexScan(files[\"content\"])\n        newMatch.length > 0 && newMatch.forEach(x => inputs.add(x))\n        console.log([...inputs])\n    }\n\n    content = {\n        projectName: \"\",\n        description: \"\",\n        content : [\n            {\n                flag : flag,\n                content : content,\n                mapping : [...inputs]\n            }\n        ]\n    };\n\n    return content;\n}\n"
                },
                {
                    "name": "./cli-abstractor-store/prompt.js",
                    "content": "import readLine from 'readline'\n/**\n * Simplifies the task of asking the user for an input - without libraries\n * \n * @param {String} varName \n * @returns \n */\n export const askForVar = async (varName ) => {\n\n    const reader = readLine.createInterface({\n      input: process.stdin,\n      output: process.stdout,\n    });\n\n    const AsyncReader = async(query) => {\n      return new Promise(\n        resolve => {\n          reader.question(query, answer => {\n            reader.close()\n            return resolve(answer)\n          })\n        }\n      )\n    }\n\n    const outData = await AsyncReader(`What's the ${varName}?        `)\n\n    return outData\n  \n  }\n"
                },
                {
                    "name": "./cli-abstractor-store/regex.js",
                    "content": "export const regexScan = (content) => {\n    // Essentially we're asking for matches with starting\n    // and ending jinja brackets without middle part\n    const regex = /{{[^{{]*}}/g;\n    const found = [...content.matchAll(regex)];\n\n    const excludeBrack = (s) => {\n        return s.substr(2, s.length - 4).trim()\n    }\n\n    const allInputsWithRepeat = found.map(x => excludeBrack(x[0]));\n    const allInput = new Set(allInputsWithRepeat)\n    const finalRes =  [...allInput];\n    console.log(finalRes)\n    return finalRes\n}"
                },
                {
                    "name": "./cli-abstractor-store/store.js",
                    "content": "const data = null\n\nexport default data;"
                },
                {
                    "name": "./cli-abstractor-store/updatePackageJson.js",
                    "content": "import {readFile, fileWriter} from './io.js'\n\n\nasync function updatePackageJson(){\n\n    console.log(\"We will begin upgrading 'bin', 'type' and 'main' -- this is needed to make this CLI functional\")\n    \n\n    const packageRawContent = await readFile('./package.json')\n    const packageContent = JSON.parse(packageRawContent)\n\n    packageContent['main'] = \"./cli-abstractor-store/index.js\"\n    packageContent['type'] = \"module\"\n    packageContent['bin'] = \"./cli-abstractor-store/index.js\"\n\n    if (!('scripts' in packageContent)){\n        packageContent['scripts'] = {}\n    }\n    packageContent['scripts']['start'] = \"node .\"\n\n\n    const finalOutput = JSON.stringify(packageContent, null, 2)\n\n    fileWriter('package.json', finalOutput)\n\n}\n\n\nexport default updatePackageJson"
                },
                {
                    "name": "./cli-abstractor-store/inner_folder/inner_hello.txt",
                    "content": ""
                }
            ],
            "mapping": [
                "Hello",
                "World",
                "]*"
            ]
        }
    ]
}

export default data;